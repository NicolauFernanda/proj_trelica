function desenharTrelica(nos, adj, rotulos_nos, barras, x, vinculos, forcas)
    figure;
    hold on;
    grid on;
    axis equal;
    
    % Configurações do gráfico
    title('Diagrama da Treliça');
    xlabel('Coordenada X');
    ylabel('Coordenada Y');
    
    % Desenhar nós
    for i = 1:size(nos, 1)
        % Escolher cor baseada no tipo de vínculo
        switch vinculos(i)
            case 'P'
                cor = 'ro'; % Pino - círculo vermelho
                tamanho = 10;
            case 'X'
                cor = 'go'; % Rolete - círculo verde
                tamanho = 8;
            case 'Y'
                cor = 'bo'; % Apoio lateral - círculo azul
                tamanho = 8;
            otherwise
                cor = 'ko'; % Nó livre - círculo preto
                tamanho = 6;
        end
        
        plot(nos(i,1), nos(i,2), cor, 'MarkerSize', tamanho, 'LineWidth', 2);
        
        % Adicionar rótulo do nó
        text(nos(i,1)+0.1, nos(i,2)+0.1, rotulos_nos{i}, 'FontSize', 10, 'FontWeight', 'bold');
    end
    
    % Desenhar barras e mostrar forças
    if ~isempty(barras)
        for bi = 1:size(barras, 1)
            i = barras(bi,1);
            j = barras(bi,2);
            forca = x(bi);
            
            % Escolher cor baseada na força (tensão/compressão)
            if forca > 0
                cor = [1, 0, 0]; % Vermelho para tração
            elseif forca < 0
                cor = [0, 0, 1]; % Azul para compressão
            else
                cor = [0.5, 0.5, 0.5]; % Cinza para força zero
            end
            
            % Desenhar barra
            line([nos(i,1), nos(j,1)], [nos(i,2), nos(j,2)], ...
                 'Color', cor, 'LineWidth', 2);
            
            % Adicionar valor da força no meio da barra
            mid_x = (nos(i,1) + nos(j,1))/2;
            mid_y = (nos(i,2) + nos(j,2))/2;
            
            text(mid_x, mid_y, sprintf('%.1f', forca), ...
                'BackgroundColor', 'white', 'Margin', 1, ...
                'HorizontalAlignment', 'center', 'FontSize', 8);
        end
    end
    
    % Desenhar forças aplicadas (se houver)
    max_forca = max(max(abs(forcas)));
    if max_forca > 0
        escala = 0.2 / max_forca; % Escala automática
        
        for i = 1:size(nos, 1)
            fx = forcas(i,1);
            fy = forcas(i,2);
            
            if fx ~= 0 || fy ~= 0
                % Desenhar seta para força
                quiver(nos(i,1), nos(i,2), fx*escala, fy*escala, ...
                       'Color', 'm', 'LineWidth', 2, 'MaxHeadSize', 1, ...
                       'AutoScale', 'off');
                
                % Texto da força
                text(nos(i,1) + fx*escala/2, nos(i,2) + fy*escala/2, ...
                     sprintf('(%.1f,%.1f)', fx, fy), ...
                     'Color', 'm', 'FontSize', 8);
            end
        end
    end
    
    % Desenhar símbolos de vínculos
    for i = 1:size(nos, 1)
        switch vinculos(i)
            case 'P'
                % Desenhar triângulo para pino
                plot(nos(i,1), nos(i,2)-0.1, 'rv', 'MarkerSize', 8, 'LineWidth', 2);
            case 'X'
                % Desenhar linha horizontal para rolete
                plot([nos(i,1)-0.1, nos(i,1)+0.1], [nos(i,2)-0.1, nos(i,2)-0.1], ...
                     'g-', 'LineWidth', 2);
            case 'Y'
                % Desenhar linha vertical para apoio lateral
                plot([nos(i,1)-0.1, nos(i,1)-0.1], [nos(i,2)-0.1, nos(i,2)+0.1], ...
                     'b-', 'LineWidth', 2);
        end
    end
    
    hold off;
    
    % Adicionar legenda
    legend('Pino', 'Rolete', 'Apoio lateral', 'Nó livre', ...
           'Força de tração', 'Força de compressão', 'Forças aplicadas', ...
           'Location', 'bestoutside');
end
